/* functions
   ========================================================================== */

// rem {
@function rem($value) {
    $unit-extract: unit($value);
    $number: $value / 1#{$unit-extract};
    @if $number == 0 {
        @return $number;
    }
    @if $unit-extract == "px" {
        $value: $value / 10 / 1#{$unit-extract} * 1rem;
    }
    @else if $unit-extract == "em" {
        $value: $value / 1#{$unit-extract} * $base-font-size;
    }
    @return $value;
}

// px to rem
$base-font-size: rem($base-font-size);
$h1-size: rem($h1-size);
$h2-size: rem($h2-size);
$h3-size: rem($h3-size);
$h4-size: rem($h4-size);
$h5-size: rem($h5-size);
$h6-size: rem($h6-size);
$big-size: rem($big-size);
$small-size: rem($small-size);
$tiny-value: rem($tiny-value);
$small-value: rem($small-value);
$medium-value: rem($medium-value);
$large-value: rem($large-value);
$field-height: rem($field-height);
$label-size: rem($label-size);
$field-size: rem($field-size);
$button-size: rem($button-size);
$wrapper: rem($wrapper);
$gutter: rem($gutter);
$row-spacing: rem($row-spacing);

// decimal round
@function decimal-round($number, $digits: 4) {
    $n: 1;
    @for $i from 1 through $digits {
        $n: $n * 10;
    }
    @if round($number * 10) == $number * 10 {
        @return $number;
    }
    @return ceil($number * $n) / $n;
}

// line height
@function line-height($font-size, $vertical-rhythm: $base-font-size * $line-height) {
    $font-size: rem($font-size);
    $vertical-rhythm: rem($vertical-rhythm);
    $coeff: 1;
    $line-height: $vertical-rhythm / $font-size;
    @while $line-height < 1 {
        $coeff: $coeff + 1;
        $line-height: $vertical-rhythm * $coeff / $font-size;
    }
    @return decimal-round($line-height);
}

// gcd
@function gcd($numerator, $denominator) {
    @while $numerator != 0 {
        $i: $numerator;
        $numerator: $denominator % $numerator;
        $denominator: $i;
    }
    @return $denominator;
}

// column width
@function column-width($number) {
    @return decimal-round((($wrapper - $gutter * ($columns - 1)) / $columns) * $number + $gutter * ($number - 1));
}

// str prefix
@function str-prefix($string) {
    @return str-slice($string, 1, 1);
}

/* mixins
   ========================================================================== */

// vertical rhythm
@mixin vertical-rhythm($font-size) {
    $font-size: rem($font-size);
    font-size: $font-size;
    line-height: line-height($font-size);
}

// grid childs
@mixin grid-childs($number: null, $modifier: null, $new-gutter: $gutter, $new-row-spacing: $row-spacing, $start: 1, $end: $columns) {
    $new-gutter: rem($new-gutter);
    $new-row-spacing: rem($new-row-spacing);
    @if $new-gutter != $gutter or $new-row-spacing != $row-spacing {
        @if $modifier == null {
            $modifier: "warning";
        }
        [class*="grid--#{$modifier}"] {
            @if $new-row-spacing != $row-spacing {
                margin-bottom: -$new-row-spacing;
            }
            @if $new-gutter != $gutter {
                margin-left: -$new-gutter;
            }
            & > .grid__item {
                @if $new-row-spacing != $row-spacing {
                    margin-bottom: $new-row-spacing;
                }
                @if $new-gutter != $gutter {
                    margin-left: $new-gutter;
                }
            }
        }
    }
    @if $modifier {
        $modifier: $modifier + "-";
    }
    @if $number {
        $start: $number;
        $end: $number;
    }
    @for $i from $start through $end {
        @if $columns % $i == 0 or $start == $end {
            .grid--#{$modifier}#{$i} {
                & > .grid__item {
                    @if $new-gutter == 0 {
                        width: decimal-round(100% / $i);
                    }
                    @else {
                        width: calc(#{decimal-round(100% / $i)} - #{$new-gutter});
                    }
                }
            }
        }
    }
}

// grid uneven childs
@mixin grid-uneven-childs($number: null, $modifier: null, $new-gutter: $gutter, $new-row-spacing: $row-spacing, $start: 1, $end: ($columns / 2) - 1) {
    $new-gutter: rem($new-gutter);
    $new-row-spacing: rem($new-row-spacing);
    @if $new-gutter != $gutter or $new-row-spacing != $row-spacing {
        @if $modifier == null {
            $modifier: "warning";
        }
        [class*="grid--uneven-#{$modifier}"] {
            @if $new-row-spacing != $row-spacing {
                margin-bottom: -$new-row-spacing;
            }
            @if $new-gutter != $gutter {
                margin-left: -$new-gutter;
            }
            & > .grid__item {
                @if $new-row-spacing != $row-spacing {
                    margin-bottom: $new-row-spacing;
                }
                @if $new-gutter != $gutter {
                    margin-left: $new-gutter;
                }
            }
        }
    }
    @if $modifier {
        $modifier: $modifier + "-";
    }
    @if $number {
        $start: nth($number, 1);
        $end: nth($number, 1);
        $columns: nth($number, 2);
    }
    @for $i from $start through $end {
        $gcd: gcd($i, $columns);
        .grid--uneven-#{$modifier}#{$i / $gcd}-#{$columns / $gcd} {
            & > *:nth-child(odd) {
                @if $new-gutter == 0 {
                    width: decimal-round(percentage($i / $columns));
                }
                @else {
                    width: calc(#{decimal-round(percentage($i / $columns))} - #{$new-gutter});
                }
            }
            & > *:nth-child(even) {
                @if $new-gutter == 0 {
                    width: decimal-round(percentage(($columns - $i) / $columns));
                }
                @else {
                    width: calc(#{decimal-round(percentage(($columns - $i) / $columns))} - #{$new-gutter});
                }
            }
        }
        .grid--uneven-#{$modifier}#{$columns / $gcd - $i / $gcd}-#{$columns / $gcd} {
            & > *:nth-child(odd) {
                @if $new-gutter == 0 {
                    width: decimal-round(percentage(($columns - $i) / $columns));
                }
                @else {
                    width: calc(#{decimal-round(percentage(($columns - $i) / $columns))} - #{$new-gutter});
                }
            }
            & > *:nth-child(even) {
                @if $new-gutter == 0 {
                    width: decimal-round(percentage($i / $columns));
                }
                @else {
                    width: calc(#{decimal-round(percentage($i / $columns))} - #{$new-gutter});
                }
            }
        }
    }
}

// grid helpers
@mixin grid-helpers($modifier: null) {
    @if $modifier {
        $modifier: $modifier + "-";
    }
    .grid--#{$modifier}h {
        flex-direction: row;
    }
    .grid--#{$modifier}h-reverse {
        flex-direction: row-reverse;
    }
    .grid--#{$modifier}v {
        flex-direction: column;
    }
    .grid--#{$modifier}v-reverse {
        flex-direction: column-reverse;
    }
    .grid--#{$modifier}main-center {
        justify-content: center;
    }
    .grid--#{$modifier}main-start {
        justify-content: flex-start;
    }
    .grid--#{$modifier}main-end {
        justify-content: flex-end;
    }
    .grid--#{$modifier}cross-center {
        align-items: center;
    }
    .grid--#{$modifier}cross-start {
        align-items: flex-start;
    }
    .grid--#{$modifier}cross-end {
        align-items: flex-end;
    }
    .grid__item--#{$modifier}initial {
        flex: initial;
    }
    .grid__item--#{$modifier}auto {
        flex: auto;
    }
    .grid__item--#{$modifier}none {
        flex: none;
    }
    .grid__item--#{$modifier}fluid {
        flex: 1;
    }
    .grid__item--#{$modifier}first {
        order: -1;
    }
    .grid__item--#{$modifier}medium {
        order : 0;
    }
    .grid__item--#{$modifier}last {
        order : 1;
    }
}

// field rhythm
@mixin field-rhythm($font-size, $height: $field-height) {
    $font-size: rem($font-size);
    $height: rem($height);
    $padding: decimal-round(($height - line-height($font-size) * $font-size) / 2);
    @if $padding < 0 {
        padding: 0 $small-value;
    }
    @else {
        padding: $padding $small-value;
    }
}

// percentage width
@mixin percentage-width($step: 10, $start: 1, $end: 100) {
    @for $i from $start through $end {
        @if $i == 33 {
            .w#{$i} {
                width: 33.3334 + %;
            }
        }
        @else if $i == 66 {
            .w#{$i} {
                width: 66.6667 + %;
            }
        }
        @else if $i % $step == 0 or $i == 25 or $i == 75 {
            .w#{$i} {
                width: $i + %;
            }
        }
    }
}

// fixed width col
@mixin fixed-width-col($number: null, $start: 1, $end: $columns) {
    @if $number {
        $start: $number;
        $end: $number;
    }
    @for $i from $start through $end {
        .w#{$i}c {
            width: column-width($i);
        }
        .mw#{$i}c {
            max-width: column-width($i);
        }
    }
}

// spacing helpers
@mixin spacing-helpers($property...) {
    $values: ($small-value: "s", $medium-value: "m", $large-value: "l");
    $properties: $property;
    @each $property in $properties {
        .#{str-prefix($property)}an {
            #{$property}: 0;
        }
        .#{str-prefix($property)}tn {
            #{$property}-top: 0;
        }
        .#{str-prefix($property)}rn {
            #{$property}-right: 0;
        }
        .#{str-prefix($property)}bn {
            #{$property}-bottom: 0;
        }
        .#{str-prefix($property)}ln {
            #{$property}-left: 0;
        }
        @each $value in $values {
            .#{str-prefix($property)}t#{nth($value, 2)} {
                #{$property}-top: nth($value, 1);
            }
            .#{str-prefix($property)}r#{nth($value, 2)} {
                #{$property}-right: nth($value, 1);
            }
            .#{str-prefix($property)}b#{nth($value, 2)} {
                #{$property}-bottom: nth($value, 1);
            }
            .#{str-prefix($property)}l#{nth($value, 2)} {
                #{$property}-left: nth($value, 1);
            }
        }
    }
}

// responsive modules
@mixin responsive-modules($label) {

    // layouts for #{$label} screens
    .#{$label}-hidden {
        display: none !important;
    }
    .#{$label}-visible {
        display: block !important;
    }
    .#{$label}-no-float {
        float: none;
    }
    .#{$label}-inbl {
        display: inline-block;
        float: none;
        vertical-align: top;
    }
    @if $label == "tiny" {
        th,
        td {
            display: block;
            width: auto;
            text-align: left;
        }
        thead {
            display: none;
        }
    }

    // widths for #{$label} screens
    .#{$label}-w100,
    .#{$label}-wauto {
        display: block !important;
        float: none !important;
        clear: none !important;
        width: auto !important;
        margin-left: 0 !important;
        margin-right: 0 !important;
        border: 0;
    }

    // margins for #{$label} screens
    .#{$label}-man {
        margin: 0 !important;
    }
}
