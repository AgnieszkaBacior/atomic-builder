/* mixins
   ========================================================================== */

// units to rem
$font-size-base         : rem($font-size-base);

$baseline               : rem($baseline);

$font-size-h1           : rem($font-size-h1);
$font-size-h2           : rem($font-size-h2);
$font-size-h3           : rem($font-size-h3);
$font-size-h4           : rem($font-size-h4);
$font-size-h5           : rem($font-size-h5);
$font-size-h6           : rem($font-size-h6);

$container-width        : rem($container-width);
$grid-gutter-width      : rem($grid-gutter-width);
$grid-offset-width      : rem($grid-offset-width);

$field-height           : rem($field-height);
$field-padding-x        : rem($field-padding-x);
$field-font-size        : rem($field-font-size);
$label-font-size        : rem($label-font-size);

$btn-height             : rem($btn-height);
$btn-padding-x          : rem($btn-padding-x);
$btn-font-size          : rem($btn-font-size);

// rhythm
@mixin rhythm($font-size: $font-size-base, $rhythm: null, $minor: false, $unit-to: "rem") {
    @if $unit-to == "em" {
        font-size: em($font-size);
    } @else {
        font-size: rem($font-size);
    }

    @if $enable-rhythm or $rhythm {
        $custom: false;

        @if not $rhythm {
            $rhythm: $baseline;
        } @else {
            $custom: true;
        }
        line-height: line-height($font-size, $rhythm, $minor, $custom);
    }
}

// rhythm form
@mixin rhythm-form($font-size, $height, $padding-x, $field-fixed) {
    $font-size: rem($font-size);
    $height: rem($height);
    $line-height: line-height($font-size);
    $padding-x: em($padding-x, $font-size);
    $padding-y: em(($height - $font-size * $line-height) / 2, $font-size);

    @if $padding-y < 0 {
        $padding-y: 0;
    }
    @if $field-fixed {
        height: em($height, $font-size);
    }
    padding: $padding-y $padding-x;
    font-size: $font-size;
    line-height: $line-height;
}

// rhythm field
@mixin rhythm-field($font-size: $field-font-size, $height: $field-height, $padding-x: $field-padding-x) {
    @include rhythm-form($font-size, $height, $padding-x, true);
}

// rhythm check
@mixin rhythm-check($font-size: $label-font-size) {
    height: $font-size * line-height($font-size);
}

// rhythm label
@mixin rhythm-label($font-size: $label-font-size, $height: $field-height, $padding-x: 0) {
    @include rhythm-form($font-size, $height, $padding-x, false);
}

// rhythm btn
@mixin rhythm-btn($font-size: $btn-font-size, $height: $btn-height, $padding-x: $btn-padding-x) {
    @include rhythm-form($font-size, $height, $padding-x, false);
}

// container
@mixin container() {
    .o-container {
        max-width: $container-width + $grid-offset-width * 2;
        margin-right: auto;
        margin-left: auto;

        @if $grid-offset-width != 0 {
            padding-right: $grid-offset-width;
            padding-left: $grid-offset-width;
        }
    }
    .o-container--auto {
        max-width: none;
    }
}

// grid columns
@mixin grid-columns($modifier: null) {
    @if $modifier {
        $modifier: "\\@" + $modifier;
    }
    @for $i from 1 through $grid-columns {
        .o-grid--#{$i}#{$modifier} > .o-grid__col {
            width: calc(100% / #{$i});
        }
        .o-grid__col--#{$i}#{$modifier} {
            width: calc(#{$i} * 100% / #{$grid-columns});
        }
    }
}

// sizes
@mixin sizes($start: 1, $end: 100, $step: 25, $modifier: null) {
    @for $i from $start through $end {
        @if $i % $step == 0 {
            .u-w#{$i}#{$modifier} {
                width: $i * 1%;
            }
        }
    }
}

// spacers utilities
@mixin spacers($modifier: null) {
    @each $spacer-name, $spacer-value in $spacers {
        $spacer-value: rem($spacer-value);

        .u-m-#{$spacer-name}#{$modifier}{
            margin: $spacer-value;
        }
        .u-mt-#{$spacer-name}#{$modifier} {
            margin-top: $spacer-value;
        }
        .u-mr-#{$spacer-name}#{$modifier} {
            margin-right: $spacer-value;
        }
        .u-mb-#{$spacer-name}#{$modifier} {
            margin-bottom: $spacer-value;
        }
        .u-ml-#{$spacer-name}#{$modifier} {
            margin-left: $spacer-value;
        }
        .u-p-#{$spacer-name}#{$modifier}{
            padding: $spacer-value;
        }
        .u-pt-#{$spacer-name}#{$modifier} {
            padding-top: $spacer-value;
        }
        .u-pr-#{$spacer-name}#{$modifier} {
            padding-right: $spacer-value;
        }
        .u-pb-#{$spacer-name}#{$modifier} {
            padding-bottom: $spacer-value;
        }
        .u-pl-#{$spacer-name}#{$modifier} {
            padding-left: $spacer-value;
        }
    }
    .u-p#{$modifier} {
        margin-top: spacer(md);
        &:first-child {
            margin-top: 0;
        }
    }
}

// font sizes utilities
@mixin font-sizes($modifier: null) {
    @each $font-size-name, $font-size-value in $font-sizes {
        .u-txt-#{$font-size-name}#{$modifier} {
            @include rhythm(font-size($font-size-name), font-size($font-size-name, true));
        }
    }
}

// colors utilities
@mixin colors($modifier: null) {
    @each $color-name, $color-code in $colors {
        .u-color-#{$color-name}#{$modifier} {
            color: $color-code;
        }
    }
}

// global utilities
@mixin utilities($modifier: null) {
    @if $modifier {
        $modifier: "\\@" + $modifier;
    }

    // display
    .u-visible#{$modifier} {
        display: block;
    }
    .u-hidden#{$modifier} {
        display: none;
    }
    .u-inline#{$modifier} {
        display: inline;
    }
    .u-inline-block#{$modifier} {
        display: inline-block;
        vertical-align: top;
    }

    // blocks alignment
    .u-right#{$modifier} {
        margin-left: auto;
    }
    .u-left#{$modifier} {
        margin-right: auto;
    }
    .u-center#{$modifier} {
        margin-right: auto;
        margin-left: auto;
    }

    // floating elements
    .u-float-right#{$modifier} {
        float: right;
    }
    .u-float-left#{$modifier} {
        float: left;
    }
    .u-no-float#{$modifier} {
        float: none;
    }

    // clearfix
    .u-clear#{$modifier} {
        clear: both;
    }
    .u-clearfix#{$modifier} {
        &::after {
            content: "";
            display: table;
            clear: both;
            border-collapse: collapse;
        }
    }

    // bfc
    .u-mod#{$modifier} {
        overflow: hidden;
    }

    // flexbox
    .u-flex#{$modifier} {
        display: flex;
    }
    .u-inline-flex#{$modifier} {
        display: inline-flex;
    }
    .u-flex-nowrap#{$modifier} {
        flex-wrap: nowrap;
    }
    .u-flex-wrap#{$modifier} {
        flex-wrap: wrap;
    }
    .u-flex-wrap-reverse#{$modifier} {
        flex-wrap: wrap-reverse;
    }
    .u-flex-row#{$modifier} {
        flex-direction: row;
    }
    .u-flex-row-reverse#{$modifier} {
        flex-direction: row-reverse;
    }
    .u-flex-column#{$modifier} {
        flex-direction: column;
    }
    .u-flex-column-reverse#{$modifier} {
        flex-direction: column-reverse;
    }
    .u-flex-main-start#{$modifier} {
        justify-content: flex-start;
    }
    .u-flex-main-end#{$modifier} {
        justify-content: flex-end;
    }
    .u-flex-main-center#{$modifier} {
        justify-content: center;
    }
    .u-flex-main-between#{$modifier} {
        justify-content: space-between;
    }
    .u-flex-main-around#{$modifier} {
        justify-content: space-around;
    }
    .u-flex-cross-start#{$modifier} {
        align-items: flex-start;
    }
    .u-flex-cross-end#{$modifier} {
        align-items: flex-end;
    }
    .u-flex-cross-center#{$modifier} {
        align-items: center;
    }
    .u-flex-cross-baseline#{$modifier} {
        align-items: baseline;
    }
    .u-flex-cross-stretch#{$modifier} {
        align-items: stretch;
    }
    .u-flex-self-start#{$modifier} {
        align-self: flex-start;
    }
    .u-flex-self-end#{$modifier} {
        align-self: flex-end;
    }
    .u-flex-self-center#{$modifier} {
        align-self: center;
    }
    .u-flex-self-baseline#{$modifier} {
        align-self: baseline;
    }
    .u-flex-self-stretch#{$modifier} {
        align-self: stretch;
    }
    .u-flex-item-fluid#{$modifier} {
        flex: 1;
    }
    .u-flex-item-auto#{$modifier} {
        flex: auto;
    }
    .u-flex-item-initial#{$modifier} {
        flex: initial;
    }
    .u-flex-item-none#{$modifier} {
        flex: none;
    }
    .u-flex-item-first#{$modifier} {
        order: -1;
    }
    .u-flex-item-medium#{$modifier} {
        order : 0;
    }
    .u-flex-item-last#{$modifier} {
        order : 1;
    }
    .u-flex-item-top#{$modifier} {
        margin-bottom: auto;
    }
    .u-flex-item-bottom#{$modifier} {
        margin-top: auto;
    }
    .u-flex-item-center#{$modifier} {
        margin: auto;
    }

    // columns
    .u-col#{$modifier} {
        column-gap: $grid-gutter-width;
    }
    @for $i from 1 through $grid-columns {
        .u-col-#{$i}#{$modifier} {
            column-count: $i;
        }
    }
    .u-col-item#{$modifier} {
        break-inside: avoid;
    }

    // typography
    .u-txt-right#{$modifier} {
        text-align: right;
    }
    .u-txt-center#{$modifier} {
        text-align: center;
    }
    .u-txt-left#{$modifier} {
        text-align: left;
    }
    .u-txt-lowercase#{$modifier} {
        text-transform: lowercase;
    }
    .u-txt-uppercase#{$modifier} {
        text-transform: uppercase;
    }
    .u-txt-capitalize#{$modifier} {
        text-transform: capitalize;
    }
    .u-txt-normal#{$modifier} {
        font-weight: $font-weight-normal;
    }
    .u-txt-bold#{$modifier} {
        font-weight: $font-weight-bold;
    }

    // sizes
    @include sizes($modifier: $modifier);

    // spacers
    @include spacers($modifier);

    // font sizes
    @include font-sizes($modifier);

    // colors
    @include colors($modifier);
}
