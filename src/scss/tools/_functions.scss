/* functions
   ========================================================================== */

// parse int
@function parse-int($number) {
    @if type-of($number) == "number" {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

// units to rem
@function rem($value) {
    @if type-of($value) == "number" {
        $number: parse-int($value);
        $unit: unit($value);

        @if $number == 0 or $unit == "rem" {
            @return $value;
        }
        @return $number / 10 * 1rem;
    }
    @return $value;
}

// units to em
@function em($value, $context: $font-size-base) {
    @if type-of($value) == "number" and type-of($context) == "number" {
        $number: parse-int($value);
        $unit: unit($value);
        $context: parse-int(rem($context)) * 10;

        @if $number == 0 or $unit == "em" {
            @return $value;
        }
        @if $unit == "rem" {
            $number: $number * 10;
        }
        @return $number / $context * 1em;
    }
    @return $value;
}

// core line height
@function line-height($font-size, $rhythm: $baseline, $minor: false, $custom: false) {
    @if type-of($font-size) == "number" and type-of($rhythm) == "number" and type-of($minor) == "bool" and type-of($custom) == "bool" {
        $font-size: rem($font-size);
        $rhythm: rem($rhythm);
        $scale: 1;
        $line-height: $rhythm / $font-size;

        @if $custom {
            @return $line-height;
        }
        @if $enable-rhythm {
            @while $line-height < 1 {
                $scale: $scale + 1;
                $line-height: $rhythm * $scale / $font-size;
            }
            @if $minor {
                @while $line-height >= 2 {
                    $scale: $scale + 1;
                    $line-height: $rhythm / $scale / $font-size;
                }
            }
            @return $line-height;
        }
    }
    @return $line-height-base;
}

// spacer maps
@each $spacer-name, $spacer-value in $spacers {
    $spacers: map-merge($spacers, ($spacer-name: rem($spacer-value)));
}

@function spacer($spacer) {
    @if map-has-key($spacers, $spacer) {
        @return map-get($spacers, $spacer);
    }
    @warn "Unfortunately, no value could be retrieved from #{$spacers}";
}

// font size maps
@function font-size($font-size, $line-height: null) {
    @if map-has-key($font-sizes, $font-size) {
        $map-custom: map-get($font-sizes, $font-size);

        @if type-of($map-custom) == "map" {
            $map-custom-font-size: map-get($map-custom, "font-size");
            $map-custom-line-height: map-get($map-custom, "line-height");

            @if not $line-height {
                @return $map-custom-font-size;
            }
            @return $map-custom-font-size * $map-custom-line-height;

        }
        @if $line-height {
            @return null;
        }
        @return map-get($font-sizes, $font-size);
    }
    @warn "Unfortunately, no value could be retrieved from #{$font-sizes}";
}

// color maps
@function color($color) {
    @if map-has-key($colors, $color) {
        @return map-get($colors, $color);
    }
    @warn "Unfortunately, no value could be retrieved from #{$colors}";
}

// breakpoint maps
$breakpoints-plus: ();

@each $bp-name, $bp-value in $breakpoints {
    $breakpoints: map-merge($breakpoints, ($bp-name: em($bp-value, 16px)));
}
@each $bp-name, $bp-value in $breakpoints {
    $breakpoints-plus: map-merge($breakpoints-plus, ($bp-name + "-plus": $bp-value + .0625));
}

$breakpoints: map-merge($breakpoints, $breakpoints-plus);

@function bp($bp) {
    @if map-has-key($breakpoints, $bp) {
        @return map-get($breakpoints, $bp);
    }
    @warn "Unfortunately, no value could be retrieved from #{$breakpoints}";
}
