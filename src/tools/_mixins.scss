/* mixins.scss
   ========================================================================== */

// Generates color variables associated with the $colors map
@mixin color-vars {
  @each $key, $value in $colors {
    --color-#{$key}: #{$value};
  }
}

// Generates font size variables associated with the $font-sizes map
@mixin font-vars($key, $value) {
  @if type-of($value) == "list" {
    --font-size-#{$key}: #{nth($value, 1)};
    --line-height-#{$key}: #{nth($value, 2)};
  } @else {
    --font-size-#{$key}: #{$value};
  }
}

@mixin font-size-vars {
  @each $key, $value in $font-sizes {
    @if type-of($value) == "map" {
      @each $map-key, $map-value in $value {
        $breakpoint-value: breakpoint-get($map-key);

        @if breakpoint-is-up($map-key) {
          @media (min-width: #{$breakpoint-value}) {
            @include font-vars($key, $map-value);
          }
        } @else if breakpoint-is-down($map-key) {
          @media (max-width: #{$breakpoint-value}) {
            @include font-vars($key, $map-value);
          }
        } @else {
          $breakpoint-lower-value: breakpoint-get-down($map-key);

          @if $breakpoint-lower-value {
            @media (max-width: #{$breakpoint-value}) and (min-width: #{$breakpoint-lower-value}) {
              @include font-vars($key, $map-value);
            }
          } @else {
            @media (max-width: #{$breakpoint-value}) {
              @include font-vars($key, $map-value);
            }
          }
        }
      }
    } @else {
      @include font-vars($key, $value);
    }
  }
}

// Generates font family variables associated with the $font-families map
@mixin font-family-vars {
  @each $key, $value in $font-families {
    --font-family-#{$key}: #{$value};
  }
}
