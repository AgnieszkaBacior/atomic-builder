///* ========================================================================
//   _mixins.scss
//   ======================================================================== */

//*  Private mixins
//   ======================================================================== */

/// Mixin to output media queries associated with a breakpoint key
/// @access private
/// @requires {function} breakpoint-get
/// @requires {function} breakpoint-is-up
/// @requires {function} breakpoint-is-down
/// @requires {function} breakpoint-get-down
/// @requires {variable} BREAKPOINT_DEFAULT_LABEL
/// @param {String} $key - Breakpoint key
@mixin breakpoint-core($key) {
  @if $key == $BREAKPOINT_DEFAULT_LABEL {
    @content;
  } @else {
    $breakpoint-value: breakpoint-get($key);

    @if $breakpoint-value {
      @if breakpoint-is-up($key) {
        @media (min-width: #{$breakpoint-value}) {
          @content;
        }
      } @else if breakpoint-is-down($key) {
        @media (max-width: #{$breakpoint-value}) {
          @content;
        }
      } @else {
        $breakpoint-lower-value: breakpoint-get-down($key);

        @if $breakpoint-lower-value {
          @media (max-width: #{$breakpoint-value}) and (min-width: #{$breakpoint-lower-value}) {
            @content;
          }
        } @else {
          @media (max-width: #{$breakpoint-value}) {
            @content;
          }
        }
      }
    }
  }
}

/// Mixin to output color variables associated with the `$colors` map
/// @access private
/// @requires {variable} colors
@mixin var-colors {
  @each $key, $value in $colors {
    --color-#{$key}: #{$value};
  }
}

/// Mixin to output font weight variables associated with the `$font-weights` map
/// @access private
/// @requires {variable} font-weights
@mixin var-font-weights {
  @each $key, $value in $font-weights {
    --font-weight-#{$key}: #{$value};
  }
}

/// Mixin to output font size and line height variables associated with a given key and value
/// @access private
/// @param {String} $key          - Font size key
/// @param {List | Number} $value - Font size value
@mixin var-rhythm($key, $value) {
  @if type-of($value) == 'list' {
    --font-size-#{$key}: #{nth($value, 1)};
    --line-height-#{$key}: #{nth($value, 2)};
  } @else {
    --font-size-#{$key}: #{$value};
  }
}

/// Mixin to output font size and line height variables associated with the `$font-sizes` map
/// @access private
/// @requires {mixin} breakpoint-core
/// @requires {mixin} var-rhythm
/// @requires {variable} font-sizes
@mixin var-font-sizes {
  @each $key, $value in $font-sizes {
    @if type-of($value) == 'map' {
      @each $map-key, $map-value in $value {
        @include breakpoint-core($map-key) {
          @include var-rhythm($key, $map-value);
        }
      }
    } @else {
      @include var-rhythm($key, $value);
    }
  }
}

/// Mixin to output font family variables associated with the `$font-families` map
/// @access private
/// @requires {variable} font-families
@mixin var-font-families {
  @each $key, $value in $font-families {
    --font-family-#{$key}: #{$value};
  }
}

/// Mixin to output container side margin variables associated with the `$container-side-margin` map
/// @access private
/// @requires {mixin} breakpoint-core
/// @requires {variable} container-side-margin
@mixin var-container-side-margin {
  @each $key, $value in $container-side-margin {
    @include breakpoint-core($key) {
      --container-side-margin: #{$value};
    }
  }
}

/// Mixin to output container max width variable associated with the `$container-max-width` variable
/// @access private
/// @requires {variable} container-max-width
@mixin var-container-max-width {
  --container-max-width: #{$container-max-width};
}

/// Mixin to output column gap variables associated with the `$grid-column-gap` map
/// @access private
/// @requires {mixin} breakpoint-core
/// @requires {variable} grid-column-gap
@mixin var-grid-column-gap {
  @each $key, $value in $grid-column-gap {
    @include breakpoint-core($key) {
      --column-gap: #{$value};
    }
  }
}

/// Mixin to output row gap variables associated with the `$grid-row-gap` map
/// @access private
/// @requires {mixin} breakpoint-core
/// @requires {variable} grid-row-gap
@mixin var-grid-row-gap {
  @each $key, $value in $grid-row-gap {
    @include breakpoint-core($key) {
      --row-gap: #{$value};
    }
  }
}

/// Mixin to output spacing variables associated with the `$spacer` map
/// @access private
/// @requires {variable} spacers
@mixin var-spacers {
  @each $key, $value in $spacers {
    --spacer-#{$key}: #{$value};
  }
}

/// Mixin to output grid columns associated with the `$grid-columns` variable
/// @access private
/// @requires {variable} grid-columns
@mixin grid-columns($modifier: null) {
  @for $i from 1 through $grid-columns {
    .o-grid--#{$i}#{$modifier} {
      --grid-column-width: calc(100% / #{$i});
    }

    .o-grid__col--#{$i}#{$modifier} {
      --grid-column-width: calc(100% * #{$i} / #{$grid-columns});
    }

    .o-grid__col--push-#{$i}#{$modifier} {
      --grid-column-offset-width: calc(100% * #{$i} / #{$grid-columns});
    }

    .o-grid__col--pull-#{$i}#{$modifier} {
      --grid-column-offset-width: calc(-100% * #{$i} / #{$grid-columns});
    }
  }
}

/// Mixin to output responsive grid columns associated with the `$grid-columns` variable
/// @access private
/// @requires {mixin} breakpoint-core
/// @requires {mixin} grid-columns
/// @requires {variable} breakpoints
@mixin responsive-grid-columns {
  $media-separator: '\\@';

  @each $key, $value in $breakpoints {
    @include breakpoint-core($key) {
      @include grid-columns(#{$media-separator}#{$key});
    }
  }
}

//*  Public mixins
//   ======================================================================== */

/// Mixin to output media queries associated with a breakpoint key
/// @access public
/// @requires {mixin} breakpoint-core
/// @param {String |Â Map} $key - Breakpoint(s)
@mixin breakpoint($key) {
  @if type-of($key) == 'string' {
    @include breakpoint-core($key) {
      @content;
    }
  } @else {
    @each $value in $key {
      @include breakpoint-core($value) {
        @content;
      }
    }
  }
}
