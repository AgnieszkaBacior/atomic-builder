///* ========================================================================
//   _functions.scss
//   ======================================================================== */

// Constants
$UPPER_SUFFIX_LABEL: '-up';
$LOWER_SUFFIX_LABEL: '-down';
$BREAKPOINT_DEFAULT_LABEL: 'base';

//*  Private functions
//   ======================================================================== */

/// Function to sort map by values
/// @author Andrew Luca
/// @link https://gist.github.com/iamandrewluca
/// @access private
/// @param {Map} $map - Map to sort
/// @return {Map}
@function map-sort-by-values($map) {
  $keys: ();
  $values: ();
  $sorted-map: ();

  @each $key, $value in $map {
    $keys: append($keys, $key);
    $values: append($values, $value);
  }

  $list: zip($keys, $values);

  @while length($list) > 0 {
    $smallest-pair: nth($list, 1);

    @each $pair in $list {
      $value: nth($pair, 2);
      $smallest-value: nth($smallest-pair, 2);

      @if $value < $smallest-value {
        $smallest-pair: $pair;
      }
    }

    $key: nth($smallest-pair, 1);
    $value: nth($smallest-pair, 2);
    $sorted-map: map-merge($sorted-map, ($key: $value));
    $smallest-pair-index: index($list, $smallest-pair);
    $new-list: ();

    @for $i from 1 through length($list) {
      @if $i != $smallest-pair-index {
        $new-list: append($new-list, nth($list, $i), 'space');
      }
    }

    $list: $new-list;
  }

  @return $sorted-map;
}

/// Function to merge breakpoints from the global settings with their upper and lower values
/// @access private
/// @requires {variable} UPPER_SUFFIX_LABEL
/// @requires {variable} LOWER_SUFFIX_LABEL
/// @param {Map} $breakpoints - Breakpoints from global settings
/// @return {Map}
@function breakpoint-merge($breakpoints) {
  @each $key, $value in $breakpoints {
    $breakpoints: map-merge($breakpoints, (#{$key}#{$UPPER_SUFFIX_LABEL}: $value + 0.0625));
    $breakpoints: map-merge($breakpoints, (#{$key}#{$LOWER_SUFFIX_LABEL}: $value));
  }

  @return $breakpoints;
}

// Merges breakpoints and sorts by values
$breakpoints: map-sort-by-values(breakpoint-merge($breakpoints));

/// Function to fetch the breakpoint value in `$breakpoints` map
/// If found, returns it, else return `null`
/// @access private
/// @requires {variable} breakpoints
/// @param {String} $key - Breakpoint key
/// @throws No value found for `$key`. Please make sure it is defined in `$breakpoints` map.
/// @return {Number | Null}
@function breakpoint-get($key) {
  @if map-has-key($breakpoints, $key) {
    @return map-get($breakpoints, $key);
  }

  @warn 'No value found for `#{$key}`. Please make sure it is defined in `#{$breakpoints}` map.';
  @return null;
}

/// Function to fetch the lower breakpoint value in `$breakpoints` map
/// If found, returns it, else return `null`
/// @access private
/// @requires {function} breakpoint-get
/// @requires {variable} breakpoints
/// @param {String} $key - Breakpoint key
/// @return {Number | Null}
@function breakpoint-get-down($key) {
  $current-index: index($breakpoints, ($key breakpoint-get($key)));

  @if $current-index and $current-index > 1 {
    @return nth(nth($breakpoints, $current-index - 1), 2);
  }

  @return null;
}

/// Function to return whether the breakpoint value in `$breakpoints` map is up
/// @access private
/// @requires {variable} UPPER_SUFFIX_LABEL
/// @param {String} $key - Breakpoint key
/// @return {Bool}
@function breakpoint-is-up($key) {
  @if str-index($key, $UPPER_SUFFIX_LABEL) {
    @return true;
  }

  @return false;
}

/// Function to return whether the breakpoint value in `$breakpoints` map is down
/// @access private
/// @requires {variable} LOWER_SUFFIX_LABEL
/// @param {String} $key - Breakpoint key
/// @return {Bool}
@function breakpoint-is-down($key) {
  @if str-index($key, $LOWER_SUFFIX_LABEL) {
    @return true;
  }

  @return false;
}
