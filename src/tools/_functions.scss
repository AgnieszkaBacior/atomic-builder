/* functions.scss
   ========================================================================== */

/* stylelint-disable */
$UPPER_SUFFIX_LABEL: "-up";
$LOWER_SUFFIX_LABEL: "-down";

// Merges the breakpoints from the global settings with their upper and lower values
@function breakpoint-merge($breakpoints) {
  @each $key, $value in $breakpoints {
    $breakpoints: map-merge($breakpoints, ("#{$key}#{$UPPER_SUFFIX_LABEL}": $value + .0625));
    $breakpoints: map-merge($breakpoints, ("#{$key}#{$LOWER_SUFFIX_LABEL}": $value));
  }

  @return $breakpoints;
}

$breakpoints: breakpoint-merge($breakpoints);

// Sorts map by values, thanks to https://gist.github.com/iamandrewluca
@function map-sort-by-values($map) {
  $keys: ();
  $values: ();
  $sorted-map: ();

  @each $key, $value in $map {
    $keys: append($keys, $key);
    $values: append($values, $value);
  }

  $list: zip($keys, $values);

  @while length($list) > 0 {
    $smallest-pair: nth($list, 1);

    @each $pair in $list {
      $value: nth($pair, 2);
      $smallest-value: nth($smallest-pair, 2);

      @if $value < $smallest-value {
        $smallest-pair: $pair;
      }
    }

    $key: nth($smallest-pair, 1);
    $value: nth($smallest-pair, 2);
    $sorted-map: map-merge($sorted-map, ($key: $value));
    $smallest-pair-index: index($list, $smallest-pair);
    $new-list: ();

    @for $i from 1 through length($list) {
      @if $i != $smallest-pair-index {
        $new-list: append($new-list, nth($list, $i), "space");
      }
    }

    $list: $new-list;
  }

  @return $sorted-map;
}

// Sorts breakpoint values
$breakpoints: map-sort-by-values($breakpoints);

// Returns the breakpoint value in a map associated with a given key
@function breakpoint-get($key) {
  @if not map-has-key($breakpoints, $key) {
    @warn "Unfortunately, no value could be retrieved from #{$key}";
  }

  @return map-get($breakpoints, $key);
}

// Returns the lower breakpoint value in a map associated with a given key
@function breakpoint-get-down($key) {
  $current-index: index($breakpoints, ($key breakpoint-get($key)));

  @if $current-index > 1 {
    @return nth(nth($breakpoints, $current-index - 1), 2);
  }

  @return false;
}

// Returns whether a breakpoint value in a map associated with a given key is up
@function breakpoint-is-up($key) {
  @if str-index($key, $UPPER_SUFFIX_LABEL) {
    @return true;
  }

  @return false;
}

// Returns whether a breakpoint value in a map associated with a given key is down
@function breakpoint-is-down($key) {
  @if str-index($key, $LOWER_SUFFIX_LABEL) {
    @return true;
  }

  @return false;
}
/* stylelint-enable */
